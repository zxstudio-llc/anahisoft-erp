import{b as g}from"./app-DQczwFTk.js";let f=!1,s=null,n=localStorage.getItem("api_token");const l="v1",y=g.create({withCredentials:!0,headers:{"X-Requested-With":"XMLHttpRequest"}}),t=g.create({baseURL:"/",headers:{"X-Requested-With":"XMLHttpRequest","Content-Type":"application/json",Accept:"application/json"},withCredentials:!0});async function k(){if(!n&&!f)return s||(s=(async()=>{try{await y.get("/sanctum/csrf-cookie"),f=!0,console.log("✅ CSRF cookie loaded successfully")}catch(e){throw console.error("❌ Error al cargar CSRF cookie:",e),f=!1,e}finally{s=null}})(),s)}function u(){f=!1,s=null}function o(e){n=e,e?(localStorage.setItem("api_token",e),u()):localStorage.removeItem("api_token")}function m(){return n}function d(){return n!==null}t.interceptors.request.use(async e=>{var i,c;const r=window.location.host;if(r&&!r.includes("localhost")&&(e.baseURL=`${window.location.protocol}//${r}`),(i=e.url)!=null&&i.includes("/sanctum/csrf-cookie"))return e;if(n)return e.headers.Authorization=`Bearer ${n}`,e.withCredentials=!0,e;try{await k()}catch(p){console.error("Failed to ensure CSRF cookie:",p)}const a=(c=document.querySelector('meta[name="csrf-token"]'))==null?void 0:c.getAttribute("content");return a&&(e.headers["X-CSRF-TOKEN"]=a),e.withCredentials=!0,e},e=>Promise.reject(e));t.interceptors.response.use(e=>e,async e=>{var r,a,i,c,p,w;if(((r=e.response)==null?void 0:r.status)===419&&!d()){console.warn("⚠️ Token CSRF expirado. Recargando..."),u();try{if(await k(),e.config)return t.request(e.config)}catch(h){console.error("Failed to reload CSRF token:",h),window.location.reload()}return}if(((a=e.response)==null?void 0:a.status)===401){console.warn("⚠️ Usuario no autenticado."),d()&&(o(null),console.warn("⚠️ Token API inválido, limpiando..."));const h=((c=(i=e.response)==null?void 0:i.data)==null?void 0:c.message)||"No estás autenticado. Por favor inicia sesión.";return Promise.reject(new Error(h))}return((p=e.response)==null?void 0:p.status)===500?(console.error("❌ Server error:",e.response.data),Promise.reject(new Error("Error interno del servidor. Por favor, inténtalo de nuevo."))):(w=e.response)!=null&&w.data&&typeof e.response.data=="object"&&"message"in e.response.data?Promise.reject(new Error(e.response.data.message)):Promise.reject(e)});const R={get:async(e,r)=>await t.get(e,{params:r}),post:async(e,r)=>await t.post(e,r),put:async(e,r)=>await t.put(e,r),patch:async(e,r)=>await t.patch(e,r),delete:async e=>await t.delete(e),setToken:o,getToken:m,isTokenAuth:d,resetCsrf:u,login:async e=>{try{const r=await t.post(`${l}/auth/login`,e);return r.token?(o(r.token),console.log("✅ Login exitoso con token API")):console.log("✅ Login exitoso con sesión"),r}catch(r){throw console.error("❌ Error en login:",r),r}},logout:async()=>{try{await t.post(`${l}/auth/logout`),d()&&o(null),u(),console.log("✅ Logout exitoso")}catch(e){throw console.error("❌ Error en logout:",e),o(null),u(),e}},refreshToken:async()=>{if(!d())throw new Error("No hay token para refrescar");try{const e=await t.post(`${l}/auth/refresh`);return e.token&&(o(e.token),console.log("✅ Token refrescado exitosamente")),e}catch(e){throw console.error("❌ Error al refrescar token:",e),o(null),e}},getCurrentUser:async()=>await t.get(`${l}/user`),validateRuc:async e=>{try{return await t.get(`${l}/sris/${e}`)}catch(r){throw console.error("❌ Error al validar RUC:",r),r}}};n&&console.log("🔑 Token API cargado desde localStorage");export{R as A};
